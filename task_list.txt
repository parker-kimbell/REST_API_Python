Low Bar

13) Create endpoint documentation on default route
14) When a RUD is made against a GUID that has expired, reject it with an error body indicating that particular GUID has expired. Document this in README.
15) Document branching methodology in README.
16) Describe file structure in README
17) Be sure to list all additional assumptions. Try to have some discussion. In README.
18) Comments!!!
20) Validate if I need tornado testing package, or pytest
22) Unit Tests for caching


LOW BAR COMPLETE
1) Create basic web server
2) Create routes for
	a) GET
	c) POST
	d) DELETE

3) Define (write down) possible client errors
4) Define client success situations (these may become apparent as we go)
5) Define server errors
6) Implement cache
7) Create logic for GET
8) Create logic for handling POST
10) Create logic for handling DELETE
11) Create persistent backend local database. MongoDB.
12) Handle GET, PUT, DELETE on GUIDs that don't exist. 
19) Add error response on a bad get
21) On update, update cache as well

VALIDATIONS

7) Validate that expiration time is before now()


VALIDATIONS COMPLETE

1) Check that timestamps passed in are in UNIX time
2) If no timestamp is given, generate one that is 30 days out from the time of GUID creation. We should only need to do this on a POST.
3) Validate that GUIDs passed in on generation are 32 hexadecimal character strings with all letters uppercase.
4) Ignore GUIDs passed in on an update. Log this assumption in post-mortem/README
5) Create a GUID on a POST if one is not specified. It must be a random 32
6) Validate that request objects are valid JSON
8) POSTs that have no user property should be rejected outright

High Bar

1) Have remote DB instead of local
2) Build out HATEOAS
3) Document what REST protocol you're using. JSON API probably.
4) 